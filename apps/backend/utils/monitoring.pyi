from typing import Any, Dict, List, Optional, Callable
import asyncio

__all__ = [
    "MetricsCollector",
    "MetricPoint",
    "PerformanceWindow",
    "AlertManager",
    "get_metrics_collector",
    "initialize_metrics",
]

class MetricPoint: ...

class PerformanceWindow:
    window_size: int
    values: Any
    def add(self, value: float) -> None: ...
    def get_stats(self) -> Dict[str, float]: ...

class MetricsCollector:
    def __init__(self, service_name: str): ...
    def record_metric(self, name: str, value: float, labels: Optional[Dict[str, str]] = ..., metric_type: str = ...) -> None: ...
    def record_request_duration(self, method: str, endpoint: str, status_code: int, duration: float) -> None: ...
    def record_trading_operation(self, operation_type: str, symbol: str, status: str, duration: Optional[float] = ...) -> None: ...
    def record_error(self, endpoint: str, error_type: str, component: str = ...) -> None: ...
    def get_performance_stats(self, metric_name: str) -> Optional[Dict[str, float]]: ...
    def get_prometheus_metrics(self) -> str: ...
    def start_background_tasks(self) -> None: ...
    def stop_background_tasks(self) -> None: ...

class AlertManager:
    def __init__(self, metrics_collector: MetricsCollector): ...
    def add_alert_rule(self, metric_name: str, threshold: float, comparison: str = ..., severity: str = ...) -> None: ...
    def check_alerts(self) -> List[Dict[str, Any]]: ...


def get_metrics_collector() -> Optional[MetricsCollector]: ...

def initialize_metrics(service_name: str) -> MetricsCollector: ... 