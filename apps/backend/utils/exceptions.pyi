from enum import Enum
from typing import Any, Dict, Optional, TypedDict

class ErrorSeverity(Enum):
    LOW: str
    MEDIUM: str
    HIGH: str
    CRITICAL: str

class TradingError(Exception):
    message: str
    code: str
    severity: str
    recovery: str
    context: Dict[str, Any]

    def __init__(self, message: str, code: str, severity: ErrorSeverity = ErrorSeverity.MEDIUM, recovery: str = ..., context: Optional[Dict[str, Any]] = ...): ...
    def to_dict(self) -> Dict[str, Any]: ...

class DatabaseError(TradingError): ...
class ConnectionError(TradingError): ...
class ConfigurationError(TradingError): ...
class AuthenticationError(TradingError): ...
class AuthorizationError(TradingError): ...
class MarketDataError(TradingError): ...
class DataQualityError(TradingError): ...
class OrderError(TradingError): ...
class RiskManagementError(TradingError): ...
class PositionError(TradingError): ...
class StrategyError(TradingError): ...
class ModelError(TradingError): ...
class ExchangeError(TradingError): ...
class RateLimitError(TradingError): ...
class ValidationError(TradingError): ...
class BusinessRuleError(TradingError): ...

def create_error_response(error: TradingError) -> Dict[str, Any]: ...

def handle_exception(exc: Exception, context: Optional[Dict[str, Any]] = ...) -> TradingError: ... 