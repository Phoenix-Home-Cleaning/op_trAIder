# ðŸš€ TRAIDER V1 - Traefik Dynamic Security Configuration
# Security headers and TLS options for institutional-grade protection

# =============================================================================
# TLS OPTIONS
# =============================================================================

tls:
  options:
    default:
      sslProtocols:
        - "TLSv1.2"
        - "TLSv1.3"
      cipherSuites:
        - "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
        - "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305"
        - "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
        - "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
      curvePreferences:
        - "CurveP521"
        - "CurveP384"
      minVersion: "VersionTLS12"
      maxVersion: "VersionTLS13"

# =============================================================================
# SECURITY MIDDLEWARE
# =============================================================================

http:
  middlewares:
    # Security headers for all services
    security-headers:
      headers:
        frameDeny: true
        sslRedirect: true
        browserXssFilter: true
        contentTypeNosniff: true
        forceSTSHeader: true
        stsIncludeSubdomains: true
        stsPreload: true
        stsSeconds: 31536000
        customRequestHeaders:
          X-Forwarded-Proto: "https"
        customResponseHeaders:
          X-Frame-Options: "DENY"
          X-Content-Type-Options: "nosniff"
          X-XSS-Protection: "1; mode=block"
          Referrer-Policy: "strict-origin-when-cross-origin"
          Permissions-Policy: "geolocation=(), microphone=(), camera=(), payment=(), usb=(), vr=(), accelerometer=(), gyroscope=(), magnetometer=(), ambient-light-sensor=(), encrypted-media=(), sync-xhr=(), midi=()"
          Content-Security-Policy: "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:; media-src 'self'; object-src 'none'; child-src 'none'; worker-src 'none'; frame-ancestors 'none'; form-action 'self'; base-uri 'self'; manifest-src 'self'"

    # Rate limiting for API protection
    rate-limit:
      rateLimit:
        average: 100
        period: "1m"
        burst: 200

    # Authentication middleware
    auth:
      basicAuth:
        users:
          - "admin:$2y$10$..."  # Generated password hash

    # IP whitelist for admin interfaces
    admin-whitelist:
      ipWhiteList:
        sourceRange:
          - "127.0.0.1/32"
          - "10.0.0.0/8"
          - "172.16.0.0/12"
          - "192.168.0.0/16"

    # Compression middleware
    compression:
      compress: {}

# =============================================================================
# ROUTERS & SERVICES
# =============================================================================

  routers:
    # Frontend router
    frontend-secure:
      rule: "Host(`traider.local`)"
      entryPoints:
        - "websecure"
      service: "frontend"
      middlewares:
        - "security-headers"
        - "rate-limit"
        - "compression"
      tls:
        certResolver: "letsencrypt"

    # Backend API router
    backend-secure:
      rule: "Host(`api.traider.local`)"
      entryPoints:
        - "websecure"
      service: "backend"
      middlewares:
        - "security-headers"
        - "rate-limit"
        - "compression"
      tls:
        certResolver: "letsencrypt"

    # Grafana router
    grafana-secure:
      rule: "Host(`monitoring.traider.local`)"
      entryPoints:
        - "websecure"
      service: "grafana"
      middlewares:
        - "security-headers"
        - "admin-whitelist"
        - "compression"
      tls:
        certResolver: "letsencrypt"

    # Prometheus router (admin only)
    prometheus-secure:
      rule: "Host(`metrics.traider.local`)"
      entryPoints:
        - "websecure"
      service: "prometheus"
      middlewares:
        - "security-headers"
        - "admin-whitelist"
        - "auth"
      tls:
        certResolver: "letsencrypt"

  services:
    frontend:
      loadBalancer:
        servers:
          - url: "http://frontend:3000"
        healthCheck:
          path: "/api"
          interval: "30s"
          timeout: "10s"

    backend:
      loadBalancer:
        servers:
          - url: "http://backend:8000"
        healthCheck:
          path: "/health"
          interval: "30s"
          timeout: "10s"

    grafana:
      loadBalancer:
        servers:
          - url: "http://grafana:3000"

    prometheus:
      loadBalancer:
        servers:
          - url: "http://prometheus:9090" 