# üîí TRAIDER V1 - Security Scanning Pipeline
#
# Comprehensive security scanning and vulnerability management for institutional-grade
# cryptocurrency trading platform. Implements multi-layered security analysis including
# dependency scanning, SAST, secrets detection, and compliance validation.
#
# Performance: <10min total execution with parallel scanning
# Risk: CRITICAL - Blocks deployments on security violations
# Compliance: All security findings logged and retained (1 year)
#
# See: docs/security/security-scanning.md
# Author: TRAIDER Team
# Since: 1.0.0-alpha

name: üîí Security Scanning Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  schedule:
    # Daily security scans at 02:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - secrets
          - sast
          - compliance

# Global environment variables for security scanning
env:
  NODE_VERSION: '18'
  FORCE_COLOR: 1
  CI: true

# Ensure only one security workflow runs at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false # Don't cancel security scans

jobs:
  # =============================================================================
  # PHASE 1: DEPENDENCY VULNERABILITY SCANNING
  # =============================================================================
  
  dependency-scan:
    name: üîç Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì• Install dependencies
        run: |
          npm ci --audit-level=moderate
          
      - name: üîç Run npm audit
        run: |
          echo "::group::NPM Security Audit"
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm audit --audit-level=moderate
          echo "::endgroup::"
          
      - name: üìä Process audit results
        run: |
          echo "## üîç Dependency Vulnerability Report" >> $GITHUB_STEP_SUMMARY
          if [ -f "npm-audit.json" ]; then
            # Extract vulnerability counts
            HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' npm-audit.json)
            MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' npm-audit.json)
            LOW=$(jq -r '.metadata.vulnerabilities.low // 0' npm-audit.json)
            
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| High     | $HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| Moderate | $MODERATE |" >> $GITHUB_STEP_SUMMARY
            echo "| Low      | $LOW |" >> $GITHUB_STEP_SUMMARY
            
            # Fail on high vulnerabilities
            if [ "$HIGH" -gt 0 ]; then
              echo "::error::High severity vulnerabilities found: $HIGH"
              exit 1
            fi
          fi
          
      - name: üîç Snyk Open Source Vulnerability Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json --file=package.json
          
      - name: üìä Process Snyk results
        if: always()
        run: |
          echo "::group::Snyk Vulnerability Analysis"
          
          # Check if Snyk results exist
          if [ -f "snyk-result.json" ]; then
            # Extract vulnerability counts from Snyk results
            HIGH_SNYK=$(jq -r '.vulnerabilities | map(select(.severity == "high")) | length' snyk-result.json 2>/dev/null || echo "0")
            MEDIUM_SNYK=$(jq -r '.vulnerabilities | map(select(.severity == "medium")) | length' snyk-result.json 2>/dev/null || echo "0")
            LOW_SNYK=$(jq -r '.vulnerabilities | map(select(.severity == "low")) | length' snyk-result.json 2>/dev/null || echo "0")
            CRITICAL_SNYK=$(jq -r '.vulnerabilities | map(select(.severity == "critical")) | length' snyk-result.json 2>/dev/null || echo "0")
            
            echo "üìä Snyk Vulnerability Report:" >> $GITHUB_STEP_SUMMARY
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical | $CRITICAL_SNYK |" >> $GITHUB_STEP_SUMMARY
            echo "| High     | $HIGH_SNYK |" >> $GITHUB_STEP_SUMMARY
            echo "| Medium   | $MEDIUM_SNYK |" >> $GITHUB_STEP_SUMMARY
            echo "| Low      | $LOW_SNYK |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Fail on critical vulnerabilities
            if [ "$CRITICAL_SNYK" -gt 0 ]; then
              echo "::error::Critical vulnerabilities found by Snyk: $CRITICAL_SNYK"
              echo "::error::Trading system deployment blocked due to critical security issues"
              exit 1
            fi
            
            # Warn on high vulnerabilities
            if [ "$HIGH_SNYK" -gt 0 ]; then
              echo "::warning::High severity vulnerabilities found by Snyk: $HIGH_SNYK"
              echo "::warning::Consider prioritizing these fixes for trading system security"
            fi
            
            echo "‚úÖ Snyk scan completed - $((CRITICAL_SNYK + HIGH_SNYK + MEDIUM_SNYK + LOW_SNYK)) total vulnerabilities found"
          else
            echo "‚ö†Ô∏è Snyk results not found - scan may have failed"
            echo "::warning::Snyk vulnerability scan did not produce results"
          fi
          
          echo "::endgroup::"
          
      - name: üîç Snyk Container Scan (if Dockerfile exists)
        if: hashFiles('Dockerfile*') != ''
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: traider-frontend:latest
          args: --severity-threshold=high --json
          
      - name: üîç Snyk Infrastructure as Code Scan
        if: hashFiles('infrastructure/**/*.yml', 'infrastructure/**/*.yaml', '**/*.tf') != ''
        uses: snyk/actions/iac@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json
          
      - name: üì§ Upload Snyk results to GitHub Code Scanning
        if: always() && hashFiles('snyk-result.json') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-result.sarif
          category: snyk-open-source
          
      - name: üìä Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-results
          path: |
            npm-audit.json
            snyk-result.json
            snyk-result.sarif
          retention-days: 90

  # =============================================================================
  # PHASE 2: SECRETS DETECTION
  # =============================================================================
  
  secrets-scan:
    name: üîê Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: üîê Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        if: github.event.before && github.event.before != '0000000000000000000000000000000000000000'
        with:
          path: ./
          base: ${{ github.event.before }}
          head: ${{ github.sha }}
          extra_args: --debug --only-verified
          
      - name: üîê Run TruffleHog full scan (fallback)
        uses: trufflesecurity/trufflehog@main
        if: github.event.before == '0000000000000000000000000000000000000000' || !github.event.before
        with:
          path: ./
          extra_args: --debug --only-verified
          
      - name: üîç GitLeaks secrets scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        # Note: Organization-level GitLeaks requires license key
        
      - name: üîç Custom secrets scan (with ignore patterns)
        run: |
          echo "::group::Secret Scanning"
          
          # Check for actual secrets while ignoring known false positives
          SECRETS_FOUND=0
          
          # Scan for actual high-risk patterns
          if grep -r -n --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.py" \
            -E "(sk-[a-zA-Z0-9]{48}|xoxb-[0-9]+-[0-9]+-[0-9]+-[a-zA-Z0-9]+)" . || \
            grep -r -n --include="*.env" --exclude="env.example" --exclude="*.env.template" \
            -E "^[A-Z_]+=.{16,}" . 2>/dev/null; then
            echo "‚ùå Real secrets detected!"
            SECRETS_FOUND=1
          fi
          
          # Check for passwords in non-test files (excluding known safe patterns)
          if grep -r -n --include="*.ts" --include="*.tsx" --include="*.py" \
            --exclude-dir="tests" --exclude-dir="test" \
            --exclude="*.test.*" --exclude="*.spec.*" \
            -E "password.*=.*['\"][^'\"]{8,}['\"]" . | \
            grep -v -E "(test|example|placeholder|demo|DB_PASSWORD.*os\.getenv|description.*Password)" | \
            grep -v "password.*=.*password" | \
            grep -v ".gitleaksignore"; then
            echo "‚ö†Ô∏è Potential password found - please review"
            SECRETS_FOUND=1
          fi
          
          # Check for tokens in non-test files
          if grep -r -n --include="*.ts" --include="*.tsx" --include="*.py" \
            --exclude-dir="tests" --exclude-dir="test" \
            --exclude="*.test.*" --exclude="*.spec.*" \
            -E "token.*=.*['\"][^'\"]{16,}['\"]" . | \
            grep -v -E "(test|example|placeholder|demo|description.*token)" | \
            grep -v ".gitleaksignore"; then
            echo "‚ö†Ô∏è Potential token found - please review"
            SECRETS_FOUND=1
          fi
          
          if [ $SECRETS_FOUND -eq 0 ]; then
            echo "‚úÖ No secrets detected"
          else
            echo "‚ùå $SECRETS_FOUND potential secrets found - please review"
            exit 1
          fi
          
          echo "::endgroup::"

  # =============================================================================
  # PHASE 3: STATIC APPLICATION SECURITY TESTING (SAST)
  # =============================================================================
  
  sast-scan:
    name: üõ°Ô∏è Static Application Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì• Install dependencies
        run: npm ci --ignore-scripts
        
      - name: üîç ESLint Security Analysis
        run: |
          echo "## üõ°Ô∏è Static Application Security Testing Results" >> $GITHUB_STEP_SUMMARY
          echo "Running ESLint security analysis..." >> $GITHUB_STEP_SUMMARY
          
          # Run ESLint with security rules
          npx eslint . --ext .ts,.tsx,.js,.jsx --format json --output-file eslint-results.json || true
          
          # Process results
          if [ -f "eslint-results.json" ]; then
            ERRORS=$(jq '[.[] | select(.errorCount > 0)] | length' eslint-results.json)
            WARNINGS=$(jq '[.[] | select(.warningCount > 0)] | length' eslint-results.json)
            
            echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Files with Errors | $ERRORS |" >> $GITHUB_STEP_SUMMARY
            echo "| Files with Warnings | $WARNINGS |" >> $GITHUB_STEP_SUMMARY
            
            # Fail on security-related errors
            SECURITY_ERRORS=$(jq '[.[] | .messages[] | select(.ruleId | test("security"))] | length' eslint-results.json)
            if [ "$SECURITY_ERRORS" -gt 0 ]; then
              echo "::error::Security-related ESLint errors found: $SECURITY_ERRORS"
              exit 1
            fi
          fi
          
      - name: üìä Upload ESLint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-security-results
          path: eslint-results.json
          retention-days: 30
          
      - name: ‚ÑπÔ∏è CodeQL Notice
        run: |
          echo "::notice::CodeQL analysis is handled by GitHub's default setup. Custom CodeQL workflows are disabled to avoid conflicts. View results in the Security tab."

  # =============================================================================
  # PHASE 4: CONTAINER SECURITY SCANNING
  # =============================================================================
  
  container-scan:
    name: üê≥ Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.changed_files, 'Dockerfile')
    
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üîç Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: üìä Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-filesystem'

  # =============================================================================
  # PHASE 5: SECURITY COMPLIANCE VALIDATION
  # =============================================================================
  
  compliance-check:
    name: üìã Security Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üîç Check security policy exists
        run: |
          if [ ! -f ".github/SECURITY.md" ]; then
            echo "::error::Security policy not found"
            exit 1
          fi
          echo "‚úÖ Security policy found"
          
      - name: üîç Check Dependabot configuration
        run: |
          if [ ! -f ".github/dependabot.yml" ]; then
            echo "::error::Dependabot configuration not found"
            exit 1
          fi
          echo "‚úÖ Dependabot configuration found"
          
      - name: üîç Validate security headers
        run: |
          echo "## üîí Security Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Policy | ‚úÖ Present |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependabot Config | ‚úÖ Present |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Workflow | ‚úÖ Present |" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # PHASE 6: SECURITY SUMMARY & REPORTING
  # =============================================================================
  
  security-summary:
    name: üìä Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, secrets-scan, sast-scan, compliance-check]
    if: always()
    
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: üìä Generate security summary
        run: |
          echo "## üîí TRAIDER V1 - Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependency-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets | ${{ needs.secrets-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST | ${{ needs.sast-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Compliance | ${{ needs.compliance-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review security findings in the Security tab" >> $GITHUB_STEP_SUMMARY
          echo "- Address any high/critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Update dependencies with security patches" >> $GITHUB_STEP_SUMMARY
          echo "- Validate compliance with institutional standards" >> $GITHUB_STEP_SUMMARY
          
      - name: üö® Fail on critical security issues
        if: |
          needs.dependency-scan.result == 'failure' ||
          needs.secrets-scan.result == 'failure' ||
          needs.sast-scan.result == 'failure'
        run: |
          echo "::error::Critical security issues detected. Deployment blocked."
          exit 1 