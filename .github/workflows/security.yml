# 🔒 TRAIDER V1 - Security Scanning Pipeline
#
# Comprehensive security scanning and vulnerability management for institutional-grade
# cryptocurrency trading platform. Implements multi-layered security analysis including
# dependency scanning, SAST, secrets detection, and compliance validation.
#
# Performance: <10min total execution with parallel scanning
# Risk: CRITICAL - Blocks deployments on security violations
# Compliance: All security findings logged and retained (1 year)
#
# See: docs/security/security-scanning.md
# Author: TRAIDER Team
# Since: 1.0.0-alpha

name: 🔒 Security Scanning Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  schedule:
    # Daily security scans at 02:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - secrets
          - sast
          - compliance

# Global environment variables for security scanning
env:
  NODE_VERSION: '18'
  FORCE_COLOR: 1
  CI: true

# Ensure only one security workflow runs at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false # Don't cancel security scans

jobs:
  # =============================================================================
  # PHASE 1: DEPENDENCY VULNERABILITY SCANNING
  # =============================================================================
  
  dependency-scan:
    name: 🔍 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: |
          npm ci --audit-level=moderate
          
      - name: 🔍 Run npm audit
        run: |
          echo "::group::NPM Security Audit"
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm audit --audit-level=moderate
          echo "::endgroup::"
          
      - name: 📊 Process audit results
        run: |
          echo "## 🔍 Dependency Vulnerability Report" >> $GITHUB_STEP_SUMMARY
          if [ -f "npm-audit.json" ]; then
            # Extract vulnerability counts
            HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' npm-audit.json)
            MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' npm-audit.json)
            LOW=$(jq -r '.metadata.vulnerabilities.low // 0' npm-audit.json)
            
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| High     | $HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| Moderate | $MODERATE |" >> $GITHUB_STEP_SUMMARY
            echo "| Low      | $LOW |" >> $GITHUB_STEP_SUMMARY
            
            # Fail on high vulnerabilities
            if [ "$HIGH" -gt 0 ]; then
              echo "::error::High severity vulnerabilities found: $HIGH"
              exit 1
            fi
          fi
          
      - name: 📊 Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-results
          path: |
            npm-audit.json
          retention-days: 90

  # =============================================================================
  # PHASE 2: SECRETS DETECTION
  # =============================================================================
  
  secrets-scan:
    name: 🔐 Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔐 Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
          
      - name: 🔍 GitLeaks secrets scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Note: GITLEAKS_LICENSE removed - GitLeaks is now open source

  # =============================================================================
  # PHASE 3: STATIC APPLICATION SECURITY TESTING (SAST)
  # =============================================================================
  
  sast-scan:
    name: 🛡️ Static Application Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔧 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: +security-and-quality
          
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci --ignore-scripts
        
      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  # =============================================================================
  # PHASE 4: CONTAINER SECURITY SCANNING
  # =============================================================================
  
  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.changed_files, 'Dockerfile')
    
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-filesystem'

  # =============================================================================
  # PHASE 5: SECURITY COMPLIANCE VALIDATION
  # =============================================================================
  
  compliance-check:
    name: 📋 Security Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔍 Check security policy exists
        run: |
          if [ ! -f ".github/SECURITY.md" ]; then
            echo "::error::Security policy not found"
            exit 1
          fi
          echo "✅ Security policy found"
          
      - name: 🔍 Check Dependabot configuration
        run: |
          if [ ! -f ".github/dependabot.yml" ]; then
            echo "::error::Dependabot configuration not found"
            exit 1
          fi
          echo "✅ Dependabot configuration found"
          
      - name: 🔍 Validate security headers
        run: |
          echo "## 🔒 Security Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Policy | ✅ Present |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependabot Config | ✅ Present |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Workflow | ✅ Present |" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # PHASE 6: SECURITY SUMMARY & REPORTING
  # =============================================================================
  
  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, secrets-scan, sast-scan, compliance-check]
    if: always()
    
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: 📊 Generate security summary
        run: |
          echo "## 🔒 TRAIDER V1 - Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets | ${{ needs.secrets-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST | ${{ needs.sast-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Compliance | ${{ needs.compliance-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review security findings in the Security tab" >> $GITHUB_STEP_SUMMARY
          echo "- Address any high/critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Update dependencies with security patches" >> $GITHUB_STEP_SUMMARY
          echo "- Validate compliance with institutional standards" >> $GITHUB_STEP_SUMMARY
          
      - name: 🚨 Fail on critical security issues
        if: |
          needs.dependency-scan.result == 'failure' ||
          needs.secrets-scan.result == 'failure' ||
          needs.sast-scan.result == 'failure'
        run: |
          echo "::error::Critical security issues detected. Deployment blocked."
          exit 1 