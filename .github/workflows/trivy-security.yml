# üõ°Ô∏è TRAIDER V1 - Trivy Security Scanning Pipeline
#
# Comprehensive security scanning using Trivy for institutional-grade
# autonomous trading platform. Uses Trivy for unified open-source
# scanner covering vulnerabilities, secrets, misconfigurations, and compliance.
#
# Performance: <5min total execution with parallel scanning
# Risk: CRITICAL - Blocks deployments on security violations
# Compliance: All security findings logged for audit trail
#
# See: docs/security/trivy-integration.md
# Author: TRAIDER Team
# Since: 1.0.0-alpha

name: üõ°Ô∏è Trivy Security Scanning

on:
  push:
    branches: [main, develop]
    paths:
      - 'package*.json'
      - 'requirements*.txt'
      - 'Dockerfile*'
      - 'infrastructure/**'
      - 'app/**'
      - 'backend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  schedule:
    # Daily security scans at 01:00 UTC (before market open)
    - cron: '0 1 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of Trivy scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - vuln
          - secret
          - config
          - license
      severity_threshold:
        description: 'Minimum severity threshold'
        required: true
        default: 'MEDIUM'
        type: choice
        options:
          - LOW
          - MEDIUM
          - HIGH
          - CRITICAL
      fail_on_findings:
        description: 'Fail pipeline on security findings'
        required: false
        default: true
        type: boolean

# Global environment variables
env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  FORCE_COLOR: 1
  CI: true
  
  # === Trivy Configuration ===
  SEVERITY_THRESHOLD: ${{ github.event.inputs.severity_threshold || 'MEDIUM' }}
  FAIL_ON_FINDINGS: ${{ github.event.inputs.fail_on_findings != 'false' }}
  
  # === Quality Gates ===
  CRITICAL_VULN_LIMIT: 0
  HIGH_VULN_LIMIT: 5
  MEDIUM_VULN_LIMIT: 20
  SECRET_LIMIT: 0

# Ensure only one Trivy workflow runs at a time per branch
concurrency:
  group: trivy-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # PHASE 1: SETUP & VALIDATION
  # =============================================================================
  
  setup-validation:
    name: üîß Setup & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 3
    
    outputs:
      scan-types: ${{ steps.determine-scans.outputs.types }}
      should-run: ${{ steps.should-run.outputs.result }}
      severity-threshold: ${{ steps.config.outputs.severity }}
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: üéØ Determine scan types to run
        id: determine-scans
        run: |
          echo "::group::Scan Type Determination"
          
          SCAN_TYPE="${{ github.event.inputs.scan_type || 'all' }}"
          SCAN_TYPES="[]"
          
          case "$SCAN_TYPE" in
            "all")
              SCAN_TYPES='["vuln", "secret", "config", "license"]'
              ;;
            "vuln")
              SCAN_TYPES='["vuln"]'
              ;;
            "secret")
              SCAN_TYPES='["secret"]'
              ;;
            "config")
              SCAN_TYPES='["config"]'
              ;;
            "license")
              SCAN_TYPES='["license"]'
              ;;
            *)
              echo "::error::Invalid scan type: $SCAN_TYPE"
              exit 1
              ;;
          esac
          
          echo "types=$SCAN_TYPES" >> $GITHUB_OUTPUT
          echo "Selected scan types: $SCAN_TYPES"
          echo "::endgroup::"
          
      - name: üéØ Configure scan parameters
        id: config
        run: |
          echo "::group::Scan Configuration"
          
          SEVERITY="${{ env.SEVERITY_THRESHOLD }}"
          echo "severity=$SEVERITY" >> $GITHUB_OUTPUT
          echo "Severity threshold: $SEVERITY"
          echo "Fail on findings: ${{ env.FAIL_ON_FINDINGS }}"
          
          echo "::endgroup::"
          
      - name: üéØ Determine if scans should run
        id: should-run
        run: |
          echo "::group::Execution Decision"
          
          SHOULD_RUN=true
          
          # Skip on draft PRs unless explicitly requested
          if [ "${{ github.event_name }}" = "pull_request" ] && \
             [ "${{ github.event.pull_request.draft }}" = "true" ] && \
             [ "${{ github.event.inputs.scan_type }}" = "" ]; then
            echo "‚ÑπÔ∏è Skipping Trivy scans on draft PR"
            SHOULD_RUN=false
          fi
          
          echo "result=$SHOULD_RUN" >> $GITHUB_OUTPUT
          
          if [ "$SHOULD_RUN" = "true" ]; then
            echo "‚úÖ Trivy scans will execute"
          else
            echo "‚è≠Ô∏è Trivy scan execution skipped"
          fi
          
          echo "::endgroup::"

  # =============================================================================
  # PHASE 2: VULNERABILITY SCANNING
  # =============================================================================
  
  trivy-vulnerability-scan:
    name: üîç Vulnerability Scanning
    runs-on: ubuntu-latest
    needs: setup-validation
    if: needs.setup-validation.outputs.should-run == 'true' && contains(fromJson(needs.setup-validation.outputs.scan-types), 'vuln')
    timeout-minutes: 10
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: üîç Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-vuln-results.sarif'
          severity: ${{ needs.setup-validation.outputs.severity-threshold }}
          scanners: 'vuln'
          
      - name: üîç Run Trivy vulnerability scanner (JSON)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-vuln-results.json'
          severity: ${{ needs.setup-validation.outputs.severity-threshold }}
          scanners: 'vuln'
          
      - name: üìä Process vulnerability results
        run: |
          echo "::group::Vulnerability Analysis"
          
          if [ -f "trivy-vuln-results.json" ]; then
            # Extract vulnerability counts
            CRITICAL=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-vuln-results.json 2>/dev/null || echo "0")
            HIGH=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-vuln-results.json 2>/dev/null || echo "0")
            MEDIUM=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' trivy-vuln-results.json 2>/dev/null || echo "0")
            LOW=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' trivy-vuln-results.json 2>/dev/null || echo "0")
            
            echo "## üîç Vulnerability Scan Report" >> $GITHUB_STEP_SUMMARY
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
            echo "| High     | $HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| Medium   | $MEDIUM |" >> $GITHUB_STEP_SUMMARY
            echo "| Low      | $LOW |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Apply quality gates
            TOTAL_CRITICAL_HIGH=$((CRITICAL + HIGH))
            
            if [ "$CRITICAL" -gt ${{ env.CRITICAL_VULN_LIMIT }} ]; then
              echo "::error::Critical vulnerabilities found: $CRITICAL (limit: ${{ env.CRITICAL_VULN_LIMIT }})"
              echo "::error::Trading system deployment blocked due to critical security issues"
              if [ "${{ env.FAIL_ON_FINDINGS }}" = "true" ]; then
                exit 1
              fi
            fi
            
            if [ "$HIGH" -gt ${{ env.HIGH_VULN_LIMIT }} ]; then
              echo "::warning::High severity vulnerabilities found: $HIGH (limit: ${{ env.HIGH_VULN_LIMIT }})"
              echo "::warning::Consider prioritizing these fixes for trading system security"
            fi
            
            echo "‚úÖ Vulnerability scan completed - $((CRITICAL + HIGH + MEDIUM + LOW)) total vulnerabilities found"
          else
            echo "‚ö†Ô∏è Vulnerability scan results not found"
            echo "::warning::Trivy vulnerability scan did not produce results"
          fi
          
          echo "::endgroup::"
          
      - name: üì§ Upload vulnerability results to GitHub Security
        if: always() && hashFiles('trivy-vuln-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-vuln-results.sarif
          category: trivy-vulnerabilities
          
      - name: üìä Upload vulnerability artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-vulnerability-results
          path: |
            trivy-vuln-results.json
            trivy-vuln-results.sarif
          retention-days: 90

  # =============================================================================
  # PHASE 3: SECRETS DETECTION
  # =============================================================================
  
  trivy-secrets-scan:
    name: üîê Secrets Detection
    runs-on: ubuntu-latest
    needs: setup-validation
    if: needs.setup-validation.outputs.should-run == 'true' && contains(fromJson(needs.setup-validation.outputs.scan-types), 'secret')
    timeout-minutes: 5
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: üîê Run Trivy secrets scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-secrets-results.sarif'
          scanners: 'secret'
          
      - name: üîê Run Trivy secrets scanner (JSON)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-secrets-results.json'
          scanners: 'secret'
          
      - name: üìä Process secrets results
        run: |
          echo "::group::Secrets Analysis"
          
          if [ -f "trivy-secrets-results.json" ]; then
            # Count secrets found
            SECRETS_COUNT=$(jq -r '[.Results[]?.Secrets[]?] | length' trivy-secrets-results.json 2>/dev/null || echo "0")
            
            echo "## üîê Secrets Scan Report" >> $GITHUB_STEP_SUMMARY
            echo "| Type | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Secrets Found | $SECRETS_COUNT |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "$SECRETS_COUNT" -gt ${{ env.SECRET_LIMIT }} ]; then
              echo "::error::Secrets detected in source code: $SECRETS_COUNT"
              echo "::error::Trading system deployment blocked due to exposed credentials"
              
              # Show details of found secrets (without values)
              echo "### üö® Detected Secrets:" >> $GITHUB_STEP_SUMMARY
              jq -r '.Results[]?.Secrets[]? | "- **\(.RuleID)** in `\(.StartLine // "unknown"):\(.EndLine // "unknown")` - \(.Title)"' trivy-secrets-results.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
              
              if [ "${{ env.FAIL_ON_FINDINGS }}" = "true" ]; then
                exit 1
              fi
            else
              echo "‚úÖ No secrets detected in source code"
            fi
          else
            echo "‚ö†Ô∏è Secrets scan results not found"
            echo "::warning::Trivy secrets scan did not produce results"
          fi
          
          echo "::endgroup::"
          
      - name: üì§ Upload secrets results to GitHub Security
        if: always() && hashFiles('trivy-secrets-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-secrets-results.sarif
          category: trivy-secrets
          
      - name: üìä Upload secrets artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-secrets-results
          path: |
            trivy-secrets-results.json
            trivy-secrets-results.sarif
          retention-days: 90

  # =============================================================================
  # PHASE 4: CONFIGURATION SCANNING
  # =============================================================================
  
  trivy-config-scan:
    name: ‚öôÔ∏è Configuration Scanning
    runs-on: ubuntu-latest
    needs: setup-validation
    if: needs.setup-validation.outputs.should-run == 'true' && contains(fromJson(needs.setup-validation.outputs.scan-types), 'config')
    timeout-minutes: 5
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: ‚öôÔ∏è Run Trivy configuration scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config-results.sarif'
          severity: ${{ needs.setup-validation.outputs.severity-threshold }}
          scanners: 'config'
          
      - name: ‚öôÔ∏è Run Trivy configuration scanner (JSON)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-config-results.json'
          severity: ${{ needs.setup-validation.outputs.severity-threshold }}
          scanners: 'config'
          
      - name: üìä Process configuration results
        run: |
          echo "::group::Configuration Analysis"
          
          if [ -f "trivy-config-results.json" ]; then
            # Extract misconfiguration counts
            CRITICAL=$(jq -r '[.Results[]?.Misconfigurations[]? | select(.Severity == "CRITICAL")] | length' trivy-config-results.json 2>/dev/null || echo "0")
            HIGH=$(jq -r '[.Results[]?.Misconfigurations[]? | select(.Severity == "HIGH")] | length' trivy-config-results.json 2>/dev/null || echo "0")
            MEDIUM=$(jq -r '[.Results[]?.Misconfigurations[]? | select(.Severity == "MEDIUM")] | length' trivy-config-results.json 2>/dev/null || echo "0")
            LOW=$(jq -r '[.Results[]?.Misconfigurations[]? | select(.Severity == "LOW")] | length' trivy-config-results.json 2>/dev/null || echo "0")
            
            echo "## ‚öôÔ∏è Configuration Scan Report" >> $GITHUB_STEP_SUMMARY
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
            echo "| High     | $HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| Medium   | $MEDIUM |" >> $GITHUB_STEP_SUMMARY
            echo "| Low      | $LOW |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Apply quality gates for critical misconfigurations
            if [ "$CRITICAL" -gt 0 ]; then
              echo "::warning::Critical misconfigurations found: $CRITICAL"
              echo "::warning::Review infrastructure configuration for trading system security"
            fi
            
            echo "‚úÖ Configuration scan completed - $((CRITICAL + HIGH + MEDIUM + LOW)) total issues found"
          else
            echo "‚ö†Ô∏è Configuration scan results not found"
            echo "::warning::Trivy configuration scan did not produce results"
          fi
          
          echo "::endgroup::"
          
      - name: üì§ Upload configuration results to GitHub Security
        if: always() && hashFiles('trivy-config-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-config-results.sarif
          category: trivy-misconfigurations
          
      - name: üìä Upload configuration artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-config-results
          path: |
            trivy-config-results.json
            trivy-config-results.sarif
          retention-days: 90

  # =============================================================================
  # PHASE 5: LICENSE SCANNING
  # =============================================================================
  
  trivy-license-scan:
    name: üìú License Compliance
    runs-on: ubuntu-latest
    needs: setup-validation
    if: needs.setup-validation.outputs.should-run == 'true' && contains(fromJson(needs.setup-validation.outputs.scan-types), 'license')
    timeout-minutes: 5
    
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: üìú Run Trivy license scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-license-results.json'
          scanners: 'license'
          
      - name: üìä Process license results
        run: |
          echo "::group::License Analysis"
          
          if [ -f "trivy-license-results.json" ]; then
            # Extract license information
            TOTAL_LICENSES=$(jq -r '[.Results[]?.Licenses[]?] | length' trivy-license-results.json 2>/dev/null || echo "0")
            
            echo "## üìú License Compliance Report" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Total Licenses | $TOTAL_LICENSES |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Check for problematic licenses (GPL, AGPL, etc.)
            PROBLEMATIC=$(jq -r '[.Results[]?.Licenses[]? | select(.Name | test("GPL|AGPL|SSPL"; "i"))] | length' trivy-license-results.json 2>/dev/null || echo "0")
            
            if [ "$PROBLEMATIC" -gt 0 ]; then
              echo "::warning::Found $PROBLEMATIC potentially problematic licenses"
              echo "::warning::Review license compatibility for commercial trading system"
              
              echo "### ‚ö†Ô∏è Licenses Requiring Review:" >> $GITHUB_STEP_SUMMARY
              jq -r '.Results[]?.Licenses[]? | select(.Name | test("GPL|AGPL|SSPL"; "i")) | "- **\(.Name)** in \(.FilePath)"' trivy-license-results.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
            else
              echo "‚úÖ No problematic licenses detected"
            fi
            
            echo "‚úÖ License scan completed - $TOTAL_LICENSES licenses analyzed"
          else
            echo "‚ö†Ô∏è License scan results not found"
            echo "::warning::Trivy license scan did not produce results"
          fi
          
          echo "::endgroup::"
          
      - name: üìä Upload license artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-license-results
          path: |
            trivy-license-results.json
          retention-days: 90

  # =============================================================================
  # PHASE 6: SUMMARY REPORT
  # =============================================================================
  
  security-summary:
    name: üìã Security Summary
    runs-on: ubuntu-latest
    needs: [setup-validation, trivy-vulnerability-scan, trivy-secrets-scan, trivy-config-scan, trivy-license-scan]
    if: always() && needs.setup-validation.outputs.should-run == 'true'
    timeout-minutes: 5
    
    steps:
      - name: üìä Generate security summary
        run: |
          echo "## üõ°Ô∏è TRAIDER V1 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Severity Threshold**: ${{ needs.setup-validation.outputs.severity-threshold }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Scan Types**: ${{ needs.setup-validation.outputs.scan-types }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Fail on Findings**: ${{ env.FAIL_ON_FINDINGS }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Job Status" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Vulnerabilities | ${{ needs.trivy-vulnerability-scan.result || 'Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets | ${{ needs.trivy-secrets-scan.result || 'Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Configuration | ${{ needs.trivy-config-scan.result || 'Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Licenses | ${{ needs.trivy-license-scan.result || 'Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üéØ Trading System Security Status" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall security status
          OVERALL_STATUS="‚úÖ SECURE"
          
          if [[ "${{ needs.trivy-vulnerability-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.trivy-secrets-scan.result }}" == "failure" ]]; then
            OVERALL_STATUS="‚ùå SECURITY ISSUES DETECTED"
          elif [[ "${{ needs.trivy-config-scan.result }}" == "failure" ]]; then
            OVERALL_STATUS="‚ö†Ô∏è CONFIGURATION ISSUES DETECTED"
          fi
          
          echo "**Status**: $OVERALL_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$OVERALL_STATUS" == *"‚ùå"* ]]; then
            echo "üö® **CRITICAL**: Trading system deployment is blocked due to security vulnerabilities." >> $GITHUB_STEP_SUMMARY
            echo "Please review and address all security findings before proceeding." >> $GITHUB_STEP_SUMMARY
          elif [[ "$OVERALL_STATUS" == *"‚ö†Ô∏è"* ]]; then
            echo "‚ö†Ô∏è **WARNING**: Configuration issues detected that may affect trading system security." >> $GITHUB_STEP_SUMMARY
            echo "Review recommended for optimal security posture." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **SUCCESS**: Trading system meets institutional security standards." >> $GITHUB_STEP_SUMMARY
            echo "All security scans passed - deployment approved." >> $GITHUB_STEP_SUMMARY
          fi 