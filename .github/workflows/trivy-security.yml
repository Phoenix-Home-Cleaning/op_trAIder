# üõ°Ô∏è TRAIDER V1 - Trivy Security Scanning Pipeline
#
# Comprehensive security scanning using Trivy for institutional-grade
# autonomous trading platform. Uses Trivy for unified open-source
# scanner covering vulnerabilities, secrets, misconfigurations, and compliance.
#
# Performance: <5min total execution with consolidated scanning
# Risk: CRITICAL - Blocks deployments on security violations
# Compliance: All security findings logged for audit trail
#
# See: docs/security/trivy-integration.md
# Author: TRAIDER Team
# Since: 1.0.0-alpha

name: üõ°Ô∏è Trivy Security Scanning

on:
  push:
    branches: [main, develop]
    paths:
      - 'package*.json'
      - 'requirements*.txt'
      - 'Dockerfile*'
      - 'infrastructure/**'
      - 'app/**'
      - 'backend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  schedule:
    # Daily security scans at 01:00 UTC (before market open)
    - cron: '0 1 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of Trivy scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - vuln
          - secret
          - config
          - license
      severity_threshold:
        description: 'Minimum severity threshold'
        required: true
        default: 'MEDIUM'
        type: choice
        options:
          - LOW
          - MEDIUM
          - HIGH
          - CRITICAL
      fail_on_findings:
        description: 'Fail pipeline on security findings'
        required: false
        default: true
        type: boolean

# Global environment variables
env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  FORCE_COLOR: 1
  CI: true
  
  # === Trivy Configuration ===
  SEVERITY_THRESHOLD: ${{ github.event.inputs.severity_threshold || 'MEDIUM' }}
  FAIL_ON_FINDINGS: ${{ github.event.inputs.fail_on_findings != 'false' }}
  
  # === Quality Gates ===
  CRITICAL_VULN_LIMIT: 0
  HIGH_VULN_LIMIT: 5
  MEDIUM_VULN_LIMIT: 20
  SECRET_LIMIT: 0

# Ensure only one Trivy workflow runs at a time per branch
concurrency:
  group: trivy-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # UNIFIED TRIVY SECURITY SCANNING
  # =============================================================================
  
  trivy-unified-scan:
    name: üõ°Ô∏è Unified Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    outputs:
      scan-results: ${{ steps.scan-summary.outputs.results }}
      vulnerabilities-found: ${{ steps.scan-summary.outputs.vulnerabilities }}
      secrets-found: ${{ steps.scan-summary.outputs.secrets }}
      config-issues: ${{ steps.scan-summary.outputs.config-issues }}
      overall-status: ${{ steps.scan-summary.outputs.status }}
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: üéØ Determine scan configuration
        id: scan-config
        run: |
          echo "::group::Scan Configuration"
          
          SCAN_TYPE="${{ github.event.inputs.scan_type || 'all' }}"
          SEVERITY="${{ env.SEVERITY_THRESHOLD }}"
          
          # Determine which scanners to run
          SCANNERS=""
          case "$SCAN_TYPE" in
            "all")
              SCANNERS="vuln,secret,config"
              ;;
            "vuln")
              SCANNERS="vuln"
              ;;
            "secret")
              SCANNERS="secret"
              ;;
            "config")
              SCANNERS="config"
              ;;
            *)
              echo "::error::Invalid scan type: $SCAN_TYPE"
              exit 1
              ;;
          esac
          
          echo "scanners=$SCANNERS" >> $GITHUB_OUTPUT
          echo "severity=$SEVERITY" >> $GITHUB_OUTPUT
          
          echo "üéØ Scan Configuration:"
          echo "  Type: $SCAN_TYPE"
          echo "  Scanners: $SCANNERS"
          echo "  Severity: $SEVERITY"
          echo "  Fail on findings: ${{ env.FAIL_ON_FINDINGS }}"
          
          echo "::endgroup::"
          
      - name: üîç Run Trivy vulnerability scan
        if: contains(steps.scan-config.outputs.scanners, 'vuln')
        id: trivy-vuln-scan
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-vulnerabilities.sarif'
          severity: ${{ steps.scan-config.outputs.severity }}
          scanners: 'vuln'
          exit-code: '0'
          ignore-unfixed: true
          skip-dirs: 'node_modules,coverage,dist,build,.next'
          
      - name: üîÑ Fallback vulnerability scan
        if: contains(steps.scan-config.outputs.scanners, 'vuln') && steps.trivy-vuln-scan.outcome == 'failure'
        run: |
          echo "::group::Fallback Security Scanning"
          echo "‚ö†Ô∏è Primary Trivy scan failed, running fallback security checks..."
          
          # Create fallback vulnerability report
          cat > trivy-vulnerabilities.json << 'EOF'
          {
            "SchemaVersion": 2,
            "ArtifactName": ".",
            "ArtifactType": "filesystem",
            "Results": [],
            "Metadata": {
              "ImageID": "",
              "DiffIDs": [],
              "RepoTags": [],
              "RepoDigests": [],
              "ImageConfig": {}
            }
          }
          EOF
          
          # Run basic npm audit as fallback
          echo "üîç Running npm audit as fallback..."
          npm audit --json > npm-audit-fallback.json || true
          
          # Check for critical/high npm vulnerabilities
          if command -v jq >/dev/null 2>&1; then
            CRITICAL_NPM=$(cat npm-audit-fallback.json | jq '.metadata.vulnerabilities.critical // 0' 2>/dev/null || echo "0")
            HIGH_NPM=$(cat npm-audit-fallback.json | jq '.metadata.vulnerabilities.high // 0' 2>/dev/null || echo "0")
            
            echo "üìä NPM Audit Results:"
            echo "  Critical: $CRITICAL_NPM"
            echo "  High: $HIGH_NPM"
            
            if [ "$CRITICAL_NPM" -gt 0 ] || [ "$HIGH_NPM" -gt 10 ]; then
              echo "‚ö†Ô∏è Significant vulnerabilities found in npm audit"
              echo "fallback-vulnerabilities-found=true" >> $GITHUB_OUTPUT
            else
              echo "‚úÖ No critical vulnerabilities in npm audit"
              echo "fallback-vulnerabilities-found=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          echo "::warning::Trivy vulnerability scan failed, fallback checks completed"
          echo "::endgroup::"
          
      - name: üîç Run Trivy vulnerability scan (JSON)
        if: contains(steps.scan-config.outputs.scanners, 'vuln')
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-vulnerabilities.json'
          severity: ${{ steps.scan-config.outputs.severity }}
          scanners: 'vuln'
          exit-code: '0'
          ignore-unfixed: true
          skip-dirs: 'node_modules,coverage,dist,build,.next'
          
      - name: üîê Run Trivy secrets scan
        if: contains(steps.scan-config.outputs.scanners, 'secret')
        id: trivy-secrets-scan
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-secrets.sarif'
          scanners: 'secret'
          exit-code: '0'
          skip-dirs: 'node_modules,coverage,dist,build,.next'
          
      - name: üîÑ Fallback secrets scan
        if: contains(steps.scan-config.outputs.scanners, 'secret') && steps.trivy-secrets-scan.outcome == 'failure'
        run: |
          echo "::group::Fallback Secrets Scanning"
          echo "‚ö†Ô∏è Primary Trivy secrets scan failed, running fallback checks..."
          
          # Create fallback secrets report
          cat > trivy-secrets.json << 'EOF'
          {
            "SchemaVersion": 2,
            "ArtifactName": ".",
            "ArtifactType": "filesystem",
            "Results": []
          }
          EOF
          
          # Basic secret pattern checks
          echo "üîç Running basic secret pattern detection..."
          SECRETS_FOUND=0
          
          # Check for high-risk secret patterns
          if grep -r -n --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.py" \
            -E "(sk-[a-zA-Z0-9]{48}|xoxb-[0-9]+-[0-9]+-[0-9]+-[a-zA-Z0-9]+|ghp_[a-zA-Z0-9]{36})" . 2>/dev/null; then
            echo "‚ùå High-risk API keys detected!"
            SECRETS_FOUND=1
          fi
          
          if [ $SECRETS_FOUND -eq 0 ]; then
            echo "‚úÖ No obvious secrets detected in fallback scan"
          else
            echo "‚ö†Ô∏è Potential secrets found in fallback scan"
          fi
          
          echo "::warning::Trivy secrets scan failed, fallback checks completed"
          echo "::endgroup::"
          
      - name: üîê Run Trivy secrets scan (JSON)
        if: contains(steps.scan-config.outputs.scanners, 'secret')
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-secrets.json'
          scanners: 'secret'
          exit-code: '0'
          skip-dirs: 'node_modules,coverage,dist,build,.next'
          
      - name: ‚öôÔ∏è Run Trivy configuration scan
        if: contains(steps.scan-config.outputs.scanners, 'config')
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config.sarif'
          severity: ${{ steps.scan-config.outputs.severity }}
          scanners: 'config'
          exit-code: '0'
          skip-dirs: 'node_modules,coverage,dist,build,.next'
          
      - name: ‚öôÔ∏è Run Trivy configuration scan (JSON)
        if: contains(steps.scan-config.outputs.scanners, 'config')
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-config.json'
          severity: ${{ steps.scan-config.outputs.severity }}
          scanners: 'config'
          exit-code: '0'
          skip-dirs: 'node_modules,coverage,dist,build,.next'
          
      - name: üìä Process scan results
        id: process-results
        run: |
          echo "::group::Security Scan Results Processing"
          
          # Initialize counters
          CRITICAL_VULNS=0
          HIGH_VULNS=0
          MEDIUM_VULNS=0
          LOW_VULNS=0
          SECRETS_COUNT=0
          CONFIG_CRITICAL=0
          CONFIG_HIGH=0
          CONFIG_MEDIUM=0
          
          # Process vulnerability results
          if [ -f "trivy-vulnerabilities.json" ]; then
            echo "üìä Processing vulnerability scan results..."
            CRITICAL_VULNS=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-vulnerabilities.json 2>/dev/null || echo "0")
            HIGH_VULNS=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-vulnerabilities.json 2>/dev/null || echo "0")
            MEDIUM_VULNS=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' trivy-vulnerabilities.json 2>/dev/null || echo "0")
            LOW_VULNS=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' trivy-vulnerabilities.json 2>/dev/null || echo "0")
          fi
          
          # Process secrets results
          if [ -f "trivy-secrets.json" ]; then
            echo "üìä Processing secrets scan results..."
            SECRETS_COUNT=$(jq -r '[.Results[]?.Secrets[]?] | length' trivy-secrets.json 2>/dev/null || echo "0")
          fi
          
          # Process configuration results
          if [ -f "trivy-config.json" ]; then
            echo "üìä Processing configuration scan results..."
            CONFIG_CRITICAL=$(jq -r '[.Results[]?.Misconfigurations[]? | select(.Severity == "CRITICAL")] | length' trivy-config.json 2>/dev/null || echo "0")
            CONFIG_HIGH=$(jq -r '[.Results[]?.Misconfigurations[]? | select(.Severity == "HIGH")] | length' trivy-config.json 2>/dev/null || echo "0")
            CONFIG_MEDIUM=$(jq -r '[.Results[]?.Misconfigurations[]? | select(.Severity == "MEDIUM")] | length' trivy-config.json 2>/dev/null || echo "0")
          fi
          
          # Generate summary report
          echo "## üõ°Ô∏è Trivy Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "trivy-vulnerabilities.json" ]; then
            echo "### üîç Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical | $CRITICAL_VULNS |" >> $GITHUB_STEP_SUMMARY
            echo "| High     | $HIGH_VULNS |" >> $GITHUB_STEP_SUMMARY
            echo "| Medium   | $MEDIUM_VULNS |" >> $GITHUB_STEP_SUMMARY
            echo "| Low      | $LOW_VULNS |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "trivy-secrets.json" ]; then
            echo "### üîê Secrets Scan Results" >> $GITHUB_STEP_SUMMARY
            echo "| Type | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Secrets Found | $SECRETS_COUNT |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "trivy-config.json" ]; then
            echo "### ‚öôÔ∏è Configuration Scan Results" >> $GITHUB_STEP_SUMMARY
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical | $CONFIG_CRITICAL |" >> $GITHUB_STEP_SUMMARY
            echo "| High     | $CONFIG_HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| Medium   | $CONFIG_MEDIUM |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Set outputs for summary job
          echo "critical-vulns=$CRITICAL_VULNS" >> $GITHUB_OUTPUT
          echo "high-vulns=$HIGH_VULNS" >> $GITHUB_OUTPUT
          echo "secrets-count=$SECRETS_COUNT" >> $GITHUB_OUTPUT
          echo "config-critical=$CONFIG_CRITICAL" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"
          
      - name: üö® Apply security quality gates
        id: quality-gates
        run: |
          echo "::group::Security Quality Gates"
          
          GATE_PASSED=true
          BLOCKING_ISSUES=0
          
          # Critical vulnerability gate
          if [ "${{ steps.process-results.outputs.critical-vulns }}" -gt ${{ env.CRITICAL_VULN_LIMIT }} ]; then
            echo "‚ùå CRITICAL: Found ${{ steps.process-results.outputs.critical-vulns }} critical vulnerabilities (limit: ${{ env.CRITICAL_VULN_LIMIT }})"
            GATE_PASSED=false
            BLOCKING_ISSUES=$((BLOCKING_ISSUES + 1))
          fi
          
          # High vulnerability gate
          if [ "${{ steps.process-results.outputs.high-vulns }}" -gt ${{ env.HIGH_VULN_LIMIT }} ]; then
            echo "‚ùå HIGH: Found ${{ steps.process-results.outputs.high-vulns }} high severity vulnerabilities (limit: ${{ env.HIGH_VULN_LIMIT }})"
            GATE_PASSED=false
            BLOCKING_ISSUES=$((BLOCKING_ISSUES + 1))
          fi
          
          # Secrets gate
          if [ "${{ steps.process-results.outputs.secrets-count }}" -gt ${{ env.SECRET_LIMIT }} ]; then
            echo "‚ùå SECRETS: Found ${{ steps.process-results.outputs.secrets-count }} exposed secrets (limit: ${{ env.SECRET_LIMIT }})"
            GATE_PASSED=false
            BLOCKING_ISSUES=$((BLOCKING_ISSUES + 1))
          fi
          
          # Critical configuration issues gate
          if [ "${{ steps.process-results.outputs.config-critical }}" -gt 0 ]; then
            echo "‚ö†Ô∏è CONFIG: Found ${{ steps.process-results.outputs.config-critical }} critical configuration issues"
            # Don't fail on config issues, just warn
          fi
          
          if [ "$GATE_PASSED" = true ]; then
            echo "‚úÖ All security quality gates passed"
            echo "gate-passed=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Security quality gates failed - $BLOCKING_ISSUES blocking issues found"
            echo "gate-passed=false" >> $GITHUB_OUTPUT
            
            if [ "${{ env.FAIL_ON_FINDINGS }}" = "true" ]; then
              echo "üö® Failing pipeline due to security violations"
              exit 1
            else
              echo "‚ö†Ô∏è Continuing despite security issues (fail_on_findings=false)"
            fi
          fi
          
          echo "::endgroup::"
          
      - name: üì§ Upload vulnerability SARIF to GitHub Security
        if: always() && hashFiles('trivy-vulnerabilities.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-vulnerabilities.sarif
          category: trivy-vulnerabilities
          
      - name: üì§ Upload secrets SARIF to GitHub Security
        if: always() && hashFiles('trivy-secrets.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-secrets.sarif
          category: trivy-secrets
          
      - name: üì§ Upload configuration SARIF to GitHub Security
        if: always() && hashFiles('trivy-config.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-config.sarif
          category: trivy-misconfigurations
          
      - name: üìä Upload scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-security-results
          path: |
            trivy-vulnerabilities.json
            trivy-vulnerabilities.sarif
            trivy-secrets.json
            trivy-secrets.sarif
            trivy-config.json
            trivy-config.sarif
          retention-days: 90
          
      - name: üìã Generate scan summary
        id: scan-summary
        run: |
          echo "::group::Final Scan Summary"
          
          # Create summary for outputs
          VULNERABILITIES="${{ steps.process-results.outputs.critical-vulns }},${{ steps.process-results.outputs.high-vulns }}"
          SECRETS="${{ steps.process-results.outputs.secrets-count }}"
          CONFIG_ISSUES="${{ steps.process-results.outputs.config-critical }}"
          STATUS="${{ steps.quality-gates.outputs.gate-passed }}"
          
          echo "results=completed" >> $GITHUB_OUTPUT
          echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
          echo "secrets=$SECRETS" >> $GITHUB_OUTPUT
          echo "config-issues=$CONFIG_ISSUES" >> $GITHUB_OUTPUT
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          
          echo "üéØ Final Security Status: $STATUS"
          echo "üìä Critical/High Vulnerabilities: $VULNERABILITIES"
          echo "üîê Secrets Found: $SECRETS"
          echo "‚öôÔ∏è Critical Config Issues: $CONFIG_ISSUES"
          
          echo "::endgroup::"

  # =============================================================================
  # SECURITY COMPLIANCE CHECK
  # =============================================================================
  
  security-gate:
    name: üö¶ Security Gate
    runs-on: ubuntu-latest
    needs: trivy-unified-scan
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: üìä Evaluate security status
        run: |
          echo "::group::Security Gate Evaluation"
          
          SCAN_STATUS="${{ needs.trivy-unified-scan.result }}"
          OVERALL_STATUS="${{ needs.trivy-unified-scan.outputs.overall-status }}"
          
          echo "## üö¶ Security Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Trivy Scan Job | $SCAN_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gates | $OVERALL_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$SCAN_STATUS" = "success" ] && [ "$OVERALL_STATUS" = "true" ]; then
            echo "‚úÖ **SECURITY GATE PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "Trading system meets institutional security standards." >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ Security gate passed - deployment approved"
          else
            echo "‚ùå **SECURITY GATE FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Trading system deployment blocked due to security issues." >> $GITHUB_STEP_SUMMARY
            echo "‚ùå Security gate failed - deployment blocked"
            
            if [ "${{ env.FAIL_ON_FINDINGS }}" = "true" ]; then
              exit 1
            fi
          fi
          
          echo "::endgroup::" 