# ðŸš€ TRAIDER V1 - Development Environment
# Docker Compose configuration for local development services
#
# Services included:
# - PostgreSQL with TimescaleDB extension for market data
# - Redis for caching and session storage
# - Adminer for database management
# - Local development network configuration
#
# Usage:
#   docker-compose -f docker-compose.dev.yml up -d
#   docker-compose -f docker-compose.dev.yml down

version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: traider-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: traider
      POSTGRES_USER: traider
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init:/docker-entrypoint-initdb.d/
    networks:
      - traider-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U traider -d traider"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=timescaledb
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: traider-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - traider-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server /usr/local/etc/redis/redis.conf

  # =============================================================================
  # DEVELOPMENT TOOLS
  # =============================================================================

  # Database administration interface
  adminer:
    image: adminer:latest
    container_name: traider-adminer-dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: lucas
    networks:
      - traider-network
    depends_on:
      postgres:
        condition: service_healthy

  # Redis administration interface
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: traider-redis-commander-dev
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    networks:
      - traider-network
    depends_on:
      redis:
        condition: service_healthy

  # =============================================================================
  # MONITORING SERVICES (Development)
  # =============================================================================

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: traider-prometheus-dev
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - traider-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: traider-grafana-dev
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - traider-network
    depends_on:
      - prometheus

  # =============================================================================
  # MESSAGE QUEUE (Phase 1+)
  # =============================================================================

  # Redpanda for high-performance message streaming
  redpanda:
    image: vectorized/redpanda:latest
    container_name: traider-redpanda-dev
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "9644:9644"
      - "29092:29092"
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    networks:
      - traider-network
    command:
      - redpanda
      - start
      - --smp
      - "1"
      - --reserve-memory
      - "0M"
      - --overprovisioned
      - --node-id
      - "0"
      - --kafka-addr
      - "PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092"
      - --advertise-kafka-addr
      - "PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092"
      - --pandaproxy-addr
      - "0.0.0.0:8082"
      - --advertise-pandaproxy-addr
      - "localhost:8082"

  # =============================================================================
  # MARKET DATA SERVICE (Shadow)
  # =============================================================================
  market-data-service:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: traider-market-data-service-dev
    command: >
      uvicorn backend.services.market_data_service.main:app --host 0.0.0.0 --port 9000 --workers 2
    environment:
      PYTHON_ENV: development
    networks:
      - traider-network
    depends_on:
      postgres:
        condition: service_healthy

  # Nginx mirror to duplicate traffic
  nginx-mirror:
    image: nginx:1.25-alpine
    container_name: traider-nginx-mirror-dev
    volumes:
      - ./infrastructure/nginx/mirror.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8085:8085"
    networks:
      - traider-network
    depends_on:
      - market-data-service

# =============================================================================
# NETWORKS & VOLUMES
# =============================================================================

networks:
  traider-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redpanda_data:
    driver: local

# =============================================================================
# DEVELOPMENT COMMANDS
# =============================================================================

# Useful development commands:
#
# Start all services:
#   docker-compose -f docker-compose.dev.yml up -d
#
# View logs:
#   docker-compose -f docker-compose.dev.yml logs -f [service_name]
#
# Stop all services:
#   docker-compose -f docker-compose.dev.yml down
#
# Reset all data:
#   docker-compose -f docker-compose.dev.yml down -v
#
# Access services:
#   Database: localhost:5432 (traider/password)
#   Redis: localhost:6379
#   Adminer: http://localhost:8080
#   Redis Commander: http://localhost:8081 (admin/admin)
#   Prometheus: http://localhost:9090
#   Grafana: http://localhost:3001 (admin/admin)
#   Redpanda: localhost:9092 