# ============================================================================
# TRAIDER V1 - Environment Configuration Template
# ============================================================================
# 
# INSTRUCTIONS:
# 1. Copy this file to .env: cp .env.example .env
# 2. Replace all "REPLACE_ME_*" values with actual secrets
# 3. Generate secrets using: npm run generate-secrets (or manually)
# 4. NEVER commit .env to version control
#
# SECURITY NOTES:
# - All secrets should be 32+ character random strings
# - Use different secrets for different environments
# - Rotate secrets regularly in production
# ============================================================================

#  Frontend Configuration 
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=REPLACE_ME_NEXTAUTH_SECRET_32_CHARS_MIN
NEXT_PUBLIC_API_URL=http://localhost:8000

#  Authentication & Authorization 
DASHBOARD_PASSWORD=REPLACE_ME_ADMIN_PASSWORD
GUEST_PASSWORD=demo123
SECRET_KEY=REPLACE_ME_JWT_SECRET_32_CHARS_MIN
ACCESS_TOKEN_EXPIRE_MINUTES=60

#  Database Configuration ─
DATABASE_URL=postgresql://traider:password@localhost:5432/traider
DB_HOST=localhost
DB_PORT=5432
DB_NAME=traider
DB_USER=traider
DB_PASSWORD=password
DB_POOL_SIZE=20
DB_MAX_OVERFLOW=10
DB_POOL_TIMEOUT=30

#  Backend Configuration 
CORS_ORIGINS=http://localhost:3000
PYTHON_ENV=development
DEBUG=false

#  Logging Configuration 
LOG_LEVEL=INFO
LOG_FORMAT=json
LOG_DIR=logs

#  Trading & Exchange APIs 
# Coinbase Advanced Trade API
COINBASE_API_KEY=
COINBASE_PRIVATE_KEY=
COINBASE_SANDBOX=true

#  Testing Configuration 
TEST_SECRET_KEY=REPLACE_ME_TEST_SECRET_32_CHARS_MIN
NODE_ENV=development

#  Monitoring & Observability 
PROMETHEUS_PORT=9090
GRAFANA_PORT=3001

#  Docker & Infrastructure 
COMPOSE_PROJECT_NAME=traider
DOCKER_REGISTRY=localhost:5000

# ============================================================================
# GENERATION COMMANDS:
# 
# Generate all secrets automatically:
#   npm run generate-secrets
# 
# Or generate manually with Node.js:
#   node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
# 
# Or with OpenSSL:
#   openssl rand -base64 32
# ============================================================================
